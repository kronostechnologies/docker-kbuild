#!/bin/bash
# Build script
set -u

ROOTDIR="$(git rev-parse --show-toplevel 2>/dev/null)"
if [[ -d "${ROOTDIR}" ]]
then
  cd "${ROOTDIR}"
fi

_npm_global () {
  if [ -w "$(npm root -g)" ]; then
    npm install -g "${@}"
  else
    sudo npm install -g "${@}"
  fi
}

_npm () {
  if [ -f package.json ];
  then
    if [ -f yarn.lock ];
    then
      if [ ! -x "$(command -v yarn)" ];
      then
        _npm_global yarn
      fi
      yarn install
    if [ "$1" == 'dev' ];
    then
      yarn run build:dev
    elif [ "$1" == 'release' ];
    then
      yarn run build
    fi
    else
      npm ci
      if [ "$1" == 'dev' ];
      then
        npm run build:dev
      elif [ "$1" == 'release' ];
      then
        npm run build
      fi
    fi
  fi
}

_bower () {
  if [ -f bower.json ];
  then
    if [ ! -x "$(command -v bower)" ];
    then
      _npm_global bower
    fi

    if [ "$1" == 'dev' ];
    then
      bower --config.interactive=false prune
    fi
    bower --config.interactive=false update
  fi
}

_grunt () {
  if [ -f Gruntfile.js ];
  then
    if [ ! -x "$(command -v grunt)" ];
    then
      _npm_global grunt-cli
    fi

    if [ "$1" == 'dev' ];
    then
      grunt build-dev
    elif [ "$1" == 'release' ];
    then
      grunt build
    fi
  fi
}

_composer () {
  if [ -f composer.json ];
  then
    if [ "$1" == 'dev' ];
    then
      if [ -f composer.lock ] && grep -qq composer\\.lock .gitignore
      then
        composer update -n --prefer-dist
      fi
      composer install -n --prefer-dist
    elif [ "$1" == 'release' ];
    then
      composer install -n --no-dev -o --prefer-dist
    fi
  fi
}

_clean () {

  if [ -f package.json ];
  then
    find . -type d -name 'node_modules' -exec rm -rf "{}" \; 2>/dev/null || true
  fi

  if [ -f bower.json ];
  then
    find . -type d -name 'bower_components' -exec rm -rf "{}" \; 2>/dev/null || true
  fi

  if [ -d .sass-cache ];
  then
    rm -rf .sass-cache/ 2>/dev/null || true
  fi

}

if [[ $# != 0 && "$1" == '--dev' ]]
then
  if [[ -f "Makefile" ]]; then
    make setup
    make compile
  else
    if [[ -f ".tool-versions" ]]; then
      asdf install
    fi
    _npm dev
    _bower dev
    _grunt dev
    _composer dev
   fi
elif [[ $# != 0 && "$1" == '--release' ]]
then
  _npm release
  _bower release
  _grunt release
  _composer release
  _clean
else
  echo "Usage: $0 --dev | --release"
  exit 1
fi
